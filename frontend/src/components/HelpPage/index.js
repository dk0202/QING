import React from 'react'

class HelpPage extends React.Component {
  constructor(props) {
    super(props);
  }



  render() {


    return (
      <React.Fragment>
        <div className='container'>
          <div className="jumbotron">
            <h2 className="display-4"><b>Q</b>uantifier Elimination <b>IN</b>variant <b>G</b>enerator Help</h2>
            <hr className="my-4"/>

            <p className="lead">
              <ul>
                <li><a href="#language"> What is the language/syntax used for entering loops?</a></li>
                <li><a href="#settings"> What configuration settings are available?</a></li>
                <li><a href="#templates"> What template types are supported?</a></li>
                <li><a href="#outputs"> What outputs are available from the tool?</a></li>


              </ul>
            </p>
            <hr className="my-4"/>

            <a className="btn btn-primary btn-lg" href="/" role="button">Return to Tool</a>


          </div>
<div style={{marginBottom:'50px'}}>
          <h2 id="language">What is the language/syntax used for entering loops?</h2>
          <p>The tool uses a simplified/toy imperative language to enter function code. The function is declared as:

            <br/><br/>
            <b>function</b> <em>F_NAME</em><b>(</b><em>ARG1,ARG2,...</em><b>){'\{'}</b><em>...FUNCTION_BODY...</em><b>{'\}'}</b>
            <br/><br/>

            Assignment statements are designated by:
            <br/><br/>
            <em>VARIABLE</em><b>=</b><em>VALUE</em><b>;</b>
            <br/><br/>

            Loops are denoted with the structure:
            <br/><br/>
            <b>while(</b><em>CONDITION</em><b>){'\{'}</b> <em>...LOOP_BODY...</em> <b>{'\}'}</b>
            <br/><br/>

            No return statement is required/read by the parser.
          </p>
</div>
          <div style={{marginBottom:'50px'}}>

          <h2 id="settings">What configuration settings are available?</h2>
            <p>
              The tool has two main settings for generating template functions: <b>Autogenerated Terms</b> and  <b>User Supplied Terms</b>v
<br/><br/>
              <b>Autogenerated Terms</b>
              <br/><br/>
              This option will automatically generate a polynomial template according to user specifications.
              The user is able to choose the maximum degree of variables with which to construct template terms.
              Once the function body is parsed, a list of variables will be displayed and the user may use the corresponding checkboxes to select which variables to include/omit in the automatically generated template.
              <br/><br/>
              <b>User Supplied Terms</b>
              <br/><br/>
              The user can also supply a list of terms to be used in the template, separated by commas. These terms should be written using Python syntax, ex:
              <br/><br/>

              <em>
              x*2**y, z*2**y, 2**y
            </em>
              <br/><br/>
If user-supplied terms are provided, there is no need to check which variables should be included in the template function after parsing.
            </p>
          </div>
          <div style={{marginBottom:'50px'}}>
            <h2 id="templates">What template types are supported?</h2>
            <p>
              Using the template auto-generation function creates <b>linear</b> or <b>polynomial</b> templates up to the specified degree.
              Providing user-supplied terms allows for the generation of invariants using <b>linear</b>, <b>polynomial</b>,  <b>logarithmic</b> or  <b>exponential</b> templates.
            </p>
          </div>
          <div style={{marginBottom:'50px'}}>
            <h2 id="outputs">What outputs are available from the tool?</h2>
            <p>
             After parsing the function body, the derived <b>verification conditions</b> are displayed to the user.
              When the invariant generator is run, the <b>parameter constraints</b> on the template function are shown next to their associated  verification condition.
              The final <b>simplified template function</b> will also be displayed. Finally, any <b>invariants</b> calculated will be show at the end of the output section.
            </p>
          </div>
        </div>
      </React.Fragment>
    );
  }
}




export default HelpPage;
